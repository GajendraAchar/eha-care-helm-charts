#{{ if eq .Values.resourceType "deployment" }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "eha-care.fullname" . }}
  labels:
    app: {{ template "eha-care.name" . }}
    chart: {{ template "eha-care.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "eha-care.name" . }}
      release: {{ .Release.Name }}
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ template "eha-care.name" . }}
        release: {{ .Release.Name }}
    spec:
      {{ if .Values.podAntiAffinity.enabled }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - {{ template "eha-care.name" . }}
            topologyKey: "kubernetes.io/hostname"
      {{ end }}
      {{ if .Values.app.db.create }}
      initContainers:
      {{- if .Values.extraInitContainers }}
{{ tpl .Values.extraInitContainers . | indent 6 }}
      {{- end }}
      
      containers:
      {{- if .Values.extraContainers }}
{{ tpl .Values.extraContainers . | indent 6 }}
      {{- end }}
      
      
      - name: {{ .Values.app.name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        resources:
{{ toYaml .Values.app.resources | indent 12 }}
        args:
          {{- range .Values.app.args }}
          - {{ . | quote }}
          {{- end }}
        ports:
        - name: app
          containerPort: {{ .Values.app.port }}
          protocol: TCP
        {{ if eq .Values.app.probe.type "request" }}
        livenessProbe:
          httpGet:
            path: {{ .Values.app.probe.path }}
            port: app
            httpHeaders:
            - name: X-Kubernetes-Health-Check
              value: livenessProbe
          initialDelaySeconds: {{ .Values.app.probe.initialDelaySeconds }}
          periodSeconds: {{ .Values.app.probe.periodSeconds }}
          timeoutSeconds: {{ .Values.app.probe.timeoutSeconds }}
        readinessProbe:
          httpGet:
            path: {{ .Values.app.probe.path }}
            port: app
            httpHeaders:
            - name: X-Kubernetes-Health-Check
              value: readinessProbe
            - name: Host
              value: {{ .Values.url }}
          initialDelaySeconds: {{ .Values.app.probe.initialDelaySeconds }}
          periodSeconds: {{ .Values.app.probe.periodSeconds }}
          timeoutSeconds: {{ .Values.app.probe.timeoutSeconds }}
        {{ end }}
        {{ if eq .Values.app.probe.type "tcp" }}
        livenessProbe:
          tcpSocket:
            port: app
          initialDelaySeconds: {{ .Values.app.probe.initialDelaySeconds }}
          periodSeconds: {{ .Values.app.probe.periodSeconds }}
        readinessProbe:
          tcpSocket:
            port: app
          initialDelaySeconds: {{ .Values.app.probe.initialDelaySeconds }}
          periodSeconds: {{ .Values.app.probe.periodSeconds }}
        {{ end }}
        {{ if eq .Values.app.probe.type "exec" }}
        livenessProbe:
          initialDelaySeconds: {{ .Values.app.probe.initialDelaySeconds }}
          periodSeconds: {{ .Values.app.probe.periodSeconds }}
          exec:
            command: ['bash', '-c', '{{ .Values.app.probe.path }}/{{ .Values.app.probe.livenessProbeScriptName }}', '{{ .Values.app.probe.timeout }}']
        readinessProbe:
          initialDelaySeconds: {{ .Values.app.probe.initialDelaySeconds }}
          periodSeconds: {{ .Values.app.probe.periodSeconds }}
          exec:
            command: ['bash', '-c', '{{ .Values.app.probe.path }}/{{ .Values.app.probe.readinessProbeScriptName }}', '{{ .Values.app.probe.timeout }}']
        {{ end }}
        {{ if .Values.env_secrets.enabled }}
        envFrom:
        - secretRef:
            name: {{ .Values.env_secrets.name }}
        {{ end }}
        env:
        {{- if .Values.extra_env_vars -}}
        {{- range $key, $value := .Values.extra_env_vars }}
        - name: {{ $key }}
          value: {{ . | quote }}
        {{- end -}}
        {{ end }}
        {{ if .Values.extra_env_vars_secretKeyRef }}
{{ toYaml .Values.extra_env_vars_secretKeyRef | indent 8 }}
        {{ end }}


        {{ if and .Values.app.db.enabled (eq .Values.app.db.type "postgres") }}
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.app.secret }}
              key: database-password
        - name: PGUSER
          value: {{ .Values.app.db.user }}
        - name: PGPORT
          value: {{ .Values.app.db.port | default 5432 | quote }}
        - name: PGHOST
          value: {{ .Values.app.db.host }}
        - name: DB_NAME
          value: {{ .Values.app.db.name }}
        {{ end }}
        
      {{ if .Values.nginx.enabled }}
      - name: nginx
        image: nginx:stable-alpine
        resources:
{{ toYaml .Values.sidecar.resources  | indent 12 }}
        ports:
        - containerPort: 80
        
      {{ end }}
      {{ if .Values.imagePullSecrets.enabled }}
      imagePullSecrets:
      - name: {{ .Values.imagePullSecrets.name }}
      {{ end }}
      
      restartPolicy: Always
#{{ end }}
